(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{394:function(t,s,a){"use strict";a.r(s);var e=a(25),v=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#把其他数据类型转换为-number-类型"}},[t._v("把其他数据类型转换为number类型")]),s("ul",[s("li",[s("a",{attrs:{href:"#js中的数学运算"}},[t._v("JS中的数学运算")])]),s("li",[s("a",{attrs:{href:"#解析字符串和强制转换"}},[t._v("解析字符串和强制转换")])])])]),s("li",[s("a",{attrs:{href:"#把其他数据类型转换为布尔类型"}},[t._v("把其他数据类型转换为布尔类型")])]),s("li",[s("a",{attrs:{href:"#比较运算符"}},[t._v("比较运算符")])])])]),s("p"),t._v(" "),s("h1",{attrs:{id:"_8、数据类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8、数据类型转换"}},[t._v("#")]),t._v(" 8、数据类型转换")]),t._v(" "),s("h2",{attrs:{id:"把其他数据类型转换为number类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#把其他数据类型转换为number类型"}},[t._v("#")]),t._v(" 把其他数据类型转换为"),s("code",[t._v("number")]),t._v("类型")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("其他类型转 number")]),t._v(" "),s("p",[t._v("什么情况下会把其他数据类型转换为 "),s("code",[t._v("number")]),t._v(" 类型？")]),t._v(" "),s("ul",[s("li",[t._v("1、"),s("code",[t._v("isNaN、Number、parseInt、parseFloat")])]),t._v(" "),s("li",[t._v("2、在进行加减乘除数值运算的时候")])]),t._v(" "),s("p",[t._v("以上的两种情况下会调用"),s("code",[t._v("Number()")]),t._v("方法把其他数据类型转换"),s("code",[t._v("number")]),t._v("类型")]),t._v(" "),s("p",[s("em",[t._v("特殊：")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引用数据类型转换为数字：都为NaN，单个数值的数组或空数组除外")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 9")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'19'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 19")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先通过toString方法将对象转化为字符串，之后再调用Number方法把字符串转化为数字")]),t._v("\n")])])])]),t._v(" "),s("h3",{attrs:{id:"js中的数学运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js中的数学运算"}},[t._v("#")]),t._v(" JS中的数学运算")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("+、-、*、/、>、<、==")]),t._v(" "),s("p",[t._v("除了加号，具有特殊性，其余的运算符都是数学运算，也就是遇到非数字类型时，会调用"),s("code",[t._v("Number()")]),t._v("方法将其转换为"),s("code",[t._v("number")]),t._v("类型再运算")]),t._v(" "),s("p",[t._v("加法的特殊性：在遇到字符串的时候，"),s("code",[t._v("+")]),t._v(" 不是数学运算，而是字符串拼接，只要不遇到字符串就是数学运算。字符串拼接：是把其他值转换为字符串再进行拼接")]),t._v(" "),s("p",[s("em",[t._v("提示")]),t._v(" ：对于"),s("code",[t._v("Number、String、Boolean、Array、RegEx、Date、Function")]),t._v("原型上的"),s("code",[t._v("toString")]),t._v("方法都是把当前数据类型转换为字符串的类型（它们的作用仅仅是用来转换为字符串的）")])]),t._v(" "),s("h3",{attrs:{id:"解析字符串和强制转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析字符串和强制转换"}},[t._v("#")]),t._v(" 解析字符串和强制转换")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("区别")]),t._v(" "),s("p",[t._v("解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字。但解析和转换两者之间还是有明显的差别。")]),t._v(" "),s("ul",[s("li",[t._v("解析("),s("code",[t._v("parseInt、parseFloat")]),t._v(")：允许字符串中含有非数字字符，解析按照从左到右，遇到非数字字符就停止。")]),t._v(" "),s("li",[t._v("转换("),s("code",[t._v("Number")]),t._v(")：不允许出现非数字字符，否则返回"),s("code",[t._v("NaN")])])])]),t._v(" "),s("h2",{attrs:{id:"把其他数据类型转换为布尔类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#把其他数据类型转换为布尔类型"}},[t._v("#")]),t._v(" 把其他数据类型转换为布尔类型")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("其他类型转 `boolean`")]),t._v(" "),s("p",[t._v("什么情况下会把其他数据类型转换为布尔类型？")]),t._v(" "),s("ul",[s("li",[t._v("1."),s("code",[t._v("Boolean")]),t._v("、"),s("code",[t._v("!")]),t._v("、"),s("code",[t._v("!!")])]),t._v(" "),s("li",[t._v("2.在条件判断的时候，先转换为布尔类型，再验证是否成立")])]),t._v(" "),s("p",[s("em",[t._v("提示")]),t._v("：只有"),s("code",[t._v("null，undifined，NaN，±0")]),t._v("，空字符串，会转化为"),s("code",[t._v("false")]),t._v("其他都转化为"),s("code",[t._v("true")])])]),t._v(" "),s("h2",{attrs:{id:"比较运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符"}},[t._v("#")]),t._v(" "),s("code",[t._v("比较运算符")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("== 、===")]),t._v(" "),s("p",[s("code",[t._v("==")]),t._v("操作符允许在相等比较中进行强制类型转换，而"),s("code",[t._v("===")]),t._v("不允许")]),t._v(" "),s("p",[t._v("在使用 "),s("code",[t._v("==")]),t._v(" 进行比较的时候，如果左右两边数据类型不相同，浏览器会默认转换为相同的类型，然后再比较（"),s("code",[t._v("===")]),t._v("不会这样操作）\n所有对象转化为布尔值都是"),s("code",[t._v("true")]),t._v("(包括空对象)高程三27，电子书45页，"),s("code",[t._v("null")]),t._v("不是对象数据类型的，所以转化为"),s("code",[t._v("false")])]),t._v(" "),s("p",[t._v("规范定义如下：\n(1)、如果"),s("code",[t._v("Type(x)")]),t._v("是数字，"),s("code",[t._v("Type(y)")]),t._v("是字符串，则返回 "),s("code",[t._v("x == ToNumber(y)")]),t._v("的结果")]),t._v(" "),s("ul",[s("li",[t._v("在比大小时，如果两个都是字符串，则按字母顺序比较大小。")])]),t._v(" "),s("p",[t._v("(2)、如果"),s("code",[t._v("Type(x)")]),t._v("是布尔类型，则返回 "),s("code",[t._v("ToNumber(x) == y")]),t._v("的结果\n(3)、如果"),s("code",[t._v("Type(x)")]),t._v("是对象，则返回 "),s("code",[t._v("ToPrimitive(x) == y")]),t._v("的结果")]),t._v(" "),s("p",[s("code",[t._v("ToPrimitive")]),t._v("：抽象操作会首先(通过调用内部的"),s("code",[t._v("[[DefaultValue]]")]),t._v(")检查该值是否有"),s("code",[t._v("valueOf()")]),t._v("方法，如果有且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用"),s("code",[t._v("toString()")]),t._v("的返回值（如果存在）来进行强制类型转换。\n如果"),s("code",[t._v("valueOf()")]),t._v("和"),s("code",[t._v("toSting()")]),t._v("都不返回基本类型值，会产生"),s("code",[t._v("TypeError")]),t._v("错误")]),t._v(" "),s("p",[t._v("比较规则如下：")]),t._v(" "),s("ul",[s("li",[t._v("1，数字 == 字符串\t在比较相等性之前先将字符串转换为数字；(空字符串转化为0)")]),t._v(" "),s("li",[t._v("2，布尔 == xxx\t只要有布尔就都转化为数字比较")]),t._v(" "),s("li",[t._v("3，xxx  == 对象\n"),s("ul",[s("li",[t._v("先将对象转化为字符串(调用内置类"),s("code",[t._v("Array、RegExp、Data、Math、Function")]),t._v("上的"),s("code",[t._v("toString")]),t._v("方法）然后遵循以下比较规则：\n（如何验证对象和xxx比较是先把对象转化为字符串[12,14,15]=='12,14,15'）")])])])]),t._v(" "),s("p",[s("em",[t._v("注意")]),t._v(" ："),s("code",[t._v("Object")]),t._v("上的 "),s("code",[t._v("toString")]),t._v(" 方法不是转换为字符串的，而是检测数据类型的；\n+ xxx为 字符串 时，用对象转化后的字符串与xxx比较；\n+ xxx为 数字 时，把对象转化后的字符串再转化为数字后比较\n+ xxx为 布尔值 时，把对象转化后的字符串再转化为数字，把布尔值也转化为数字再比较；")]),t._v(" "),s("ul",[s("li",[t._v("4，对象 == 对象\t只有两个对象都指向同一个内存空间才返回true")]),t._v(" "),s("li",[t._v("5，"),s("code",[t._v("null")]),t._v("或者"),s("code",[t._v("undefined")]),t._v(" 和其它任何值都不相等（两个等号也是）")]),t._v(" "),s("li",[s("code",[t._v("null===null")]),t._v(" //true")]),t._v(" "),s("li",[s("code",[t._v("undefined===undefined")]),t._v(" //true；")])])])])}),[],!1,null,null,null);s.default=v.exports}}]);