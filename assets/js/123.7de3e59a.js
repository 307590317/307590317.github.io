(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{440:function(e,t,a){"use strict";a.r(t);var s=a(25),v=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#webpack-构建流程"}},[e._v("webpack 构建流程")])]),t("li",[t("a",{attrs:{href:"#webpack打包优化"}},[e._v("webpack打包优化")]),t("ul",[t("li",[t("a",{attrs:{href:"#优化打包速度"}},[e._v("优化打包速度")]),t("ul",[t("li",[t("a",{attrs:{href:"#开启tree-shaking"}},[e._v("开启tree-shaking")])]),t("li",[t("a",{attrs:{href:"#缩小文件查找范围"}},[e._v("缩小文件查找范围")])]),t("li",[t("a",{attrs:{href:"#用thread-loader开启多进程loader转换"}},[e._v("用thread-loader开启多进程loader转换")])]),t("li",[t("a",{attrs:{href:"#配置loader缓存"}},[e._v("配置loader缓存")])])])]),t("li",[t("a",{attrs:{href:"#优化体积"}},[e._v("优化体积")]),t("ul",[t("li",[t("a",{attrs:{href:"#开启scope-hoisting"}},[e._v("开启Scope Hoisting")])])])])])])])]),t("p"),e._v(" "),t("h1",{attrs:{id:"webpack原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack原理"}},[e._v("#")]),e._v(" webpack原理")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("原理")]),e._v(" "),t("p",[t("code",[e._v("webpack")]),e._v("是一个"),t("code",[e._v("javascript")]),e._v("文件的静态模块打包器。")]),e._v(" "),t("p",[t("code",[e._v("webpack")]),e._v("就像一个生产线，要经过一系列流程处理后才能将源文件转换为要输出的结果。这条生产线上的每一个流程的功能都是单一的，多个流程之前有依赖关系，只有完成当前处理后才能交给下一个流程处理。插件就像是插入到生产线中的一个功能，在特定的时机对生产线上的资源做处理。"),t("code",[e._v("webpack")]),e._v("内部通过"),t("code",[e._v("Tapable")]),e._v("来组织这条生产线。在运行的过程中会广播对应的事件，插件只需要监听自己所关心的事件，就能加入到这条生产线中，去改变生产线的运作。")]),e._v(" "),t("p",[t("code",[e._v("webpack")]),e._v("的事件流机制保证了插件的有序性，使得整个系统的扩展性很好。")])]),e._v(" "),t("h2",{attrs:{id:"webpack-构建流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-构建流程"}},[e._v("#")]),e._v(" webpack 构建流程")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("构建流程")]),e._v(" "),t("p",[t("code",[e._v("webpack")]),e._v("的打包过程是一个串行的过程，从启动到结束，会一个接一个流程的走下去，最终打包出需要的"),t("code",[e._v("bundle")]),e._v("。下面就是要执行的流程")]),e._v(" "),t("ul",[t("li",[e._v("1、初始化参数：从配置文件和"),t("code",[e._v("Shell")]),e._v("语句中读取并合并参数，得出最终的配置对象")]),e._v(" "),t("li",[e._v("2、开始编译：用上一步得到的得到的参数初始化"),t("code",[e._v("Compiler")]),e._v("对象，加载所有配置的插件，执行对象的"),t("code",[e._v("run")]),e._v("方法，开始编译")]),e._v(" "),t("li",[e._v("3、确定入口：根据配置中的entry找到所有入口文件")]),e._v(" "),t("li",[e._v("4、构建模块：从入口文件开始，开始构建模块，调用所有配置的"),t("code",[e._v("loader")]),e._v("对模块进行处理，使用"),t("code",[e._v("acorn")]),e._v("这个库生成"),t("code",[e._v("ast")]),e._v("语法树，再遍历"),t("code",[e._v("ast")]),e._v("语法树收集该模块依赖的模块，再处理依赖的模块，直到所有模块都经过构建。")]),e._v(" "),t("li",[e._v("5、输出资源：通过"),t("code",[e._v("compilation.seal")]),e._v("方法依次对每个模块和"),t("code",[e._v("chunk")]),e._v("进行整理，生成编译后的源码，合并、拆分。每一个"),t("code",[e._v("chunk")]),e._v("对应一个入口文件，开始生成最后的"),t("code",[e._v("js")]),e._v("。再通过"),t("code",[e._v("MainTemplate.render")]),e._v("（处理入口文件模块）和"),t("code",[e._v("ChunkTemplate.render")]),e._v("（处理异步加载的模块）方法将模块处理成带有"),t("code",[e._v("__webpack__require()")]),e._v("的格式，然后将处理完的"),t("code",[e._v("js")]),e._v("输出到"),t("code",[e._v("output")]),e._v("的"),t("code",[e._v("path")]),e._v("中")])]),e._v(" "),t("p",[e._v("对应的"),t("code",[e._v("webpack")]),e._v("事件")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("entry-options")]),e._v("：初始化参数")]),e._v(" "),t("li",[t("code",[e._v("compile")]),e._v("：开始编译")]),e._v(" "),t("li",[t("code",[e._v("make")]),e._v("：分析入口文件，创建模块对象")]),e._v(" "),t("li",[t("code",[e._v("build-module")]),e._v("：构建模块，调用"),t("code",[e._v("loader")]),e._v("处理模块")]),e._v(" "),t("li",[t("code",[e._v("after-compile")]),e._v("：完成所有的模块构建，结束编译")]),e._v(" "),t("li",[t("code",[e._v("emit")]),e._v("："),t("code",[e._v("Compiler")]),e._v("开始输出生成的"),t("code",[e._v("assets")]),e._v("，插件有最后的机会修改"),t("code",[e._v("assets")]),e._v("，")]),e._v(" "),t("li",[t("code",[e._v("after-emit")]),e._v("：输出完成")])])]),e._v(" "),t("h2",{attrs:{id:"webpack打包优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack打包优化"}},[e._v("#")]),e._v(" webpack打包优化")]),e._v(" "),t("h3",{attrs:{id:"优化打包速度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化打包速度"}},[e._v("#")]),e._v(" 优化打包速度")]),e._v(" "),t("h4",{attrs:{id:"开启tree-shaking"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开启tree-shaking"}},[e._v("#")]),e._v(" 开启tree-shaking")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("开启 tree-shaking 的方式")]),e._v(" "),t("ul",[t("li",[e._v("1、将"),t("code",[e._v("mode")]),e._v("改为"),t("code",[e._v("production")]),e._v("模式，将会自动开启"),t("code",[e._v("tree shaking")]),e._v("和"),t("code",[e._v("uglifyjs")]),e._v("。")]),e._v(" "),t("li",[e._v("2、通过"),t("code",[e._v("optimization")]),e._v("配置去开启一些优化的功能， 又叫"),t("code",[e._v("Scope Hoisting")]),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("module"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("exports "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("mode")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'none'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("entry")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'./src/index.js'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("output")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("filename")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'bundle.js'")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("optimization")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 模块只导出被使用的成员")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("usedExports")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 用来标记 '枯树叶'")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 尽可能合并每一个模块到一个函数中 提升运行效率")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("concatenateModules")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 压缩输出结果")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("minimize")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 用来摇下 '枯树叶'，")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("sideEffects")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 要去除没有副作用的引用")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])]),e._v(" "),t("p",[t("code",[e._v("tree shaking")]),e._v("还需要配置一些其他的东西：")]),e._v(" "),t("ul",[t("li",[e._v("1、"),t("code",[e._v("tree shaking")]),e._v("依赖的是"),t("code",[e._v("es6 module")]),e._v("规范,而"),t("code",[e._v("@babel/preset-env")]),e._v("会将"),t("code",[e._v("es6 module")]),e._v("转化为"),t("code",[e._v("commonjs")]),e._v("代码，这样"),t("code",[e._v("tree shaking")]),e._v("就不会生效，所以需要在"),t("code",[e._v("@babel/preset-env")]),e._v("这个插件中将"),t("code",[e._v("module")]),e._v("改为"),t("code",[e._v("false")]),e._v(",不转为"),t("code",[e._v("commonjs")]),e._v("代码。")])]),e._v(" "),t("div",{staticClass:"language-.babelrc extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "presets": [\n    ["@babel/preset-env",\n      {\n        "modules": false // 不转为commonjs\n      }\n    ]\n  ]\n}\n')])])]),t("ul",[t("li",[e._v("2、"),t("code",[e._v("sideEffects")]),e._v("：用来标识代码是否有副作用或者哪些代码有副作用，从而为"),t("code",[e._v("tree shaking")]),e._v("提供更大的压缩空间。需要在"),t("code",[e._v("package.json")]),e._v("中写明所有文件都没有副作用还是哪些文件有副作用。")])]),e._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"sideEffects"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 表示所有文件都没有副作用")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"sideEffects"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 表示哪些文件是有副作用的")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"./src/extend.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"*.css"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\n")])])])]),e._v(" "),t("h4",{attrs:{id:"缩小文件查找范围"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缩小文件查找范围"}},[e._v("#")]),e._v(" 缩小文件查找范围")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("ul",[t("li",[e._v("1、采用"),t("code",[e._v("include exclude")]),e._v("来减少"),t("code",[e._v("loader")]),e._v("搜索时的转换时间。")]),e._v(" "),t("li",[e._v("2、采用"),t("code",[e._v("alias")]),e._v("取别名的方式来缩小"),t("code",[e._v("import vue")]),e._v("时，"),t("code",[e._v("webpack")]),e._v("的查找范围，不用的话"),t("code",[e._v("webpack")]),e._v("就会采用向上递归的方式去"),t("code",[e._v("node_modules")]),e._v("目录下找。")]),e._v(" "),t("li",[e._v("3、增加"),t("code",[e._v("noParse")]),e._v(", 告诉"),t("code",[e._v("webpack")]),e._v("不解析模块中的依赖， 比如"),t("code",[e._v("jquery、moment")])]),e._v(" "),t("li",[e._v("4、采用"),t("code",[e._v("webpack.IgnorePlugin")]),e._v(" 插件，忽略掉第三方包的指定目录，比如"),t("code",[e._v("moment")]),e._v("的语言包")]),e._v(" "),t("li",[e._v("5、增加"),t("code",[e._v("extensions")]),e._v("字段定义文件后缀，告诉"),t("code",[e._v("webpack")]),e._v("优先查找哪些文件")])])]),e._v(" "),t("h4",{attrs:{id:"用thread-loader开启多进程loader转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用thread-loader开启多进程loader转换"}},[e._v("#")]),e._v(" 用thread-loader开启多进程loader转换")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("把"),t("code",[e._v("thread-loader")]),e._v("这个"),t("code",[e._v("loader")]),e._v("放在其他"),t("code",[e._v("loader")]),e._v("的前面(左边)，放置在这个"),t("code",[e._v("loader")]),e._v("之后的"),t("code",[e._v("loader")]),e._v("就会在一个单独的worker池中"),t("code",[e._v("worker pool")]),e._v("运行，当项目比较复杂，文件比较多时，添加这个"),t("code",[e._v("loader")]),e._v("会减少转换时间。如果项目比较简单，文件比较少，反而会增加时间。")])]),e._v(" "),t("h4",{attrs:{id:"配置loader缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置loader缓存"}},[e._v("#")]),e._v(" 配置loader缓存")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("babel-loader")]),e._v("中可以通过设置"),t("code",[e._v("cacheDirectory")]),e._v("来开启缓存，"),t("code",[e._v("babel-loader?cacheDirectory=true")]),e._v(",就会将每次的编译结果写进硬盘文件，不支持"),t("code",[e._v("cacheDirectory")]),e._v("的可以使用"),t("code",[e._v("cache-loader")]),e._v("，再次构建会先比较，如果文件没有改变则会直接使用缓存。")])]),e._v(" "),t("h3",{attrs:{id:"优化体积"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化体积"}},[e._v("#")]),e._v(" 优化体积")]),e._v(" "),t("h4",{attrs:{id:"开启scope-hoisting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开启scope-hoisting"}},[e._v("#")]),e._v(" 开启Scope Hoisting")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[t("code",[e._v("Scope Hoisting")]),e._v("也叫作用域提升，是在"),t("code",[e._v("webpack3")]),e._v("中新推出的功能。"),t("code",[e._v("Scope Hoisting")]),e._v("的原理是将所有的模块按照引用顺序放在一个函数作用域里，然后适当的重名一些变量防止命名冲突，以此减少了代码运行时作用域，从而减少了内存。这个功能在"),t("code",[e._v("production")]),e._v("模式下默认开启，也是只支持"),t("code",[e._v("es6 module")]),e._v(",不支持"),t("code",[e._v("commonjs")]),e._v("。")])])])}),[],!1,null,null,null);t.default=v.exports}}]);