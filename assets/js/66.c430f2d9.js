(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{381:function(t,v,_){"use strict";_.r(v);var e=_(25),s=Object(e.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p"),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#集中式和分布式版本控制系统的区别"}},[t._v("集中式和分布式版本控制系统的区别：")])]),v("li",[v("a",{attrs:{href:"#_1、初始化仓库-或-克隆仓库"}},[t._v("1、初始化仓库 或 克隆仓库")])]),v("li",[v("a",{attrs:{href:"#_2、提交内容到暂存区-撤回暂存区的内容"}},[t._v("2、提交内容到暂存区 / 撤回暂存区的内容：")])]),v("li",[v("a",{attrs:{href:"#_3、把暂存区中的内容提交到本地版本库-撤回提交到本地版本库的内容-撤回提交的-commit"}},[t._v("3、把暂存区中的内容提交到本地版本库 / 撤回提交到本地版本库的内容（撤回提交的 commit ）：")])]),v("li",[v("a",{attrs:{href:"#_4、把本地版本库的代码同步到远程仓库"}},[t._v("4、把本地版本库的代码同步到远程仓库")])]),v("li",[v("a",{attrs:{href:"#比较每个区域的不同"}},[t._v("比较每个区域的不同")])]),v("li",[v("a",{attrs:{href:"#根提交-root-commit"}},[t._v("根提交(root-commit)")])]),v("li",[v("a",{attrs:{href:"#团队协作与分支"}},[t._v("团队协作与分支")]),v("ul",[v("li",[v("a",{attrs:{href:"#中央服务器-中央仓库"}},[t._v("中央服务器（中央仓库）")])]),v("li",[v("a",{attrs:{href:"#代码合并"}},[t._v("代码合并")])]),v("li",[v("a",{attrs:{href:"#单独分支的管理"}},[t._v("单独分支的管理")])])])]),v("li",[v("a",{attrs:{href:"#linux操作系统中常用的命令"}},[t._v("Linux操作系统中常用的命令")])]),v("li",[v("a",{attrs:{href:"#stash-临时缓存"}},[t._v("stash 临时缓存")])]),v("li",[v("a",{attrs:{href:"#修改完代码-未commit-发现分支错误"}},[t._v("修改完代码（未commit）发现分支错误")])]),v("li",[v("a",{attrs:{href:"#代码合并中的问题"}},[t._v("代码合并中的问题")]),v("ul",[v("li",[v("a",{attrs:{href:"#只合并某个分支的某一个commit到另一个分支"}},[t._v("只合并某个分支的某一个commit到另一个分支")])]),v("li",[v("a",{attrs:{href:"#合并连续多个的commit到指定的分支上"}},[t._v("合并连续多个的commit到指定的分支上")])])])]),v("li",[v("a",{attrs:{href:"#回滚代码"}},[t._v("回滚代码")])]),v("li",[v("a",{attrs:{href:"#取消merge"}},[t._v("取消merge")])]),v("li",[v("a",{attrs:{href:"#git常用命令"}},[t._v("git常用命令")])])])]),v("p"),t._v(" "),v("h1",{attrs:{id:"_29、git"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_29、git"}},[t._v("#")]),t._v(" 29、Git")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("什么是 git")]),t._v(" "),v("p",[t._v("分布式版本控制系统，它是由"),v("code",[t._v("linux")]),t._v("（全球比较大得服务器系统）创始人花了两周时间使用C语言编写的工具（在"),v("code",[t._v("git")]),t._v("窗口中一般都是执行"),v("code",[t._v("Linux")]),t._v("命令）\n"),v("em",[t._v("什么是版本控制系统（"),v("code",[t._v("git")]),t._v("）")]),t._v("？")]),t._v(" "),v("p",[t._v("没有版本控制系统之前，后面修改的内容会替换原有的内容，原有的内容没有做保存，以后想找都找不到；")]),t._v(" "),v("p",[t._v("版本控制系统的优势")]),t._v(" "),v("ul",[v("li",[t._v("1、备份文件")]),t._v(" "),v("li",[t._v("2、记录历史")]),t._v(" "),v("li",[t._v("3、回到过去")]),t._v(" "),v("li",[t._v("4、多段共享")]),t._v(" "),v("li",[t._v("5、团队协作")])]),t._v(" "),v("p",[t._v("常用的版本控制系统")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git")]),t._v("：分布式版本控制系统")]),t._v(" "),v("li",[v("code",[t._v("svn")]),t._v("：集中式版本控制系统")])]),t._v(" "),v("p",[v("em",[v("code",[t._v("git")]),t._v("和"),v("code",[t._v("svn")]),t._v(" 的区别")]),t._v("：")]),t._v(" "),v("ul",[v("li",[t._v("1、"),v("code",[t._v("git")]),t._v("属于分布式版本控制系统，也就是每个开发人员从中心版本库/服务器上"),v("code",[t._v("chect out")]),t._v("代码后会在自己的机器上克隆一个自己的版本库。无网络的时候也可以提交文件，查看历史版本记录而"),v("code",[t._v("svn")]),t._v("属于集中式版本控制系统（离开服务器就无法工作）；")]),t._v(" "),v("li",[t._v("2、"),v("code",[t._v("GIT")]),t._v("把内容按元数据方式存储，而"),v("code",[t._v("SVN")]),t._v("是按文件：.git目录是处于你的机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西；")]),t._v(" "),v("li",[t._v("3、"),v("code",[t._v("Git")]),t._v("没有一个全局版本号，而"),v("code",[t._v("SVN")]),t._v("有：目前为止这是跟"),v("code",[t._v("SVN")]),t._v("相比"),v("code",[t._v("Git")]),t._v("缺少的最大的一个特征。")]),t._v(" "),v("li",[t._v("4、"),v("code",[t._v("Git")]),t._v("下载下来后，在本地不必联网就可以看到所有的"),v("code",[t._v("log")]),t._v("，很方便学习，"),v("code",[t._v("SVN")]),t._v("却需要联网；")]),t._v(" "),v("li",[t._v("5、"),v("code",[t._v("git")]),t._v("没有严格的权限管理控制，"),v("code",[t._v("svn")]),t._v("则有；")])])]),t._v(" "),v("h2",{attrs:{id:"集中式和分布式版本控制系统的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集中式和分布式版本控制系统的区别"}},[t._v("#")]),t._v(" 集中式和分布式版本控制系统的区别：")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("区别")]),t._v(" "),v("p",[v("em",[t._v("集中式版本控制系统")]),t._v("：所有的版本备份和历史记录都在中央服务器上，每个人的电脑仅仅是一个开发代码的地方而已；如果想要查看历史记录，我们必须联网访问到中央服务器才可以；")]),t._v(" "),v("p",[v("em",[t._v("分布式版本控制系统")]),t._v("：\n每个人都是一个单独的管理系统，在自己的本地就可以创建一个仓库，可以记录版本和历史。如果想要在不同的电脑上同步，就需要一个在网络上有一个服务器，保证能从不同的电脑上拉到代码，当然前提是有网络。（例如自己的"),v("code",[t._v("gitHub")]),t._v("仓库）。我们也可以像集中式一样，建立一个中央服务器，每个人可以把自己本地的信息推送到中央服务器上（比如公司项目团队合作，就可以自己搭建内部的gitLab,部署自己内部的代码）。")])]),t._v(" "),v("h2",{attrs:{id:"_1、初始化仓库-或-克隆仓库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、初始化仓库-或-克隆仓库"}},[t._v("#")]),t._v(" 1、初始化仓库 或 克隆仓库")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[v("em",[t._v("初始化仓库")])]),t._v(" "),v("ul",[v("li",[t._v("1、建立一个文件夹，在文件夹中打开"),v("code",[t._v("Git Bash Here")]),t._v("，输入"),v("code",[t._v("git init")]),t._v("。执行完成之后，会在当前文件夹下自动生成一个"),v("code",[t._v(".git")]),t._v("的文件夹，说明当前文件夹就是一个本机独立的"),v("code",[t._v("git")]),t._v("版本控制仓库；")]),t._v(" "),v("li",[t._v("2、关联仓库"),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[t._v("git remote add origin xxx "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// xxx 为 github仓库地址")]),t._v("\ngit remote rm xxx "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移除这个链接通道")]),t._v("\ngit remote "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("v "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查看当前仓库链接的所有通道")]),t._v("\n")])])])])]),t._v(" "),v("p",[v("em",[t._v("克隆git仓库")])]),t._v(" "),v("ul",[v("li",[t._v("在本地某个文件夹中右键打开"),v("code",[t._v("Git Bash Here")]),t._v("，执行以下命令："),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[t._v("git clone xxx      "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// xxx为仓库地址")]),t._v("\n")])])])])]),t._v(" "),v("p",[t._v("如果是克隆的仓库，则不需要执行"),v("code",[t._v("git init")]),t._v(",因为"),v("code",[t._v("github")]),t._v("都自带"),v("code",[t._v(".git")]),t._v("文件")])]),t._v(" "),v("h2",{attrs:{id:"_2、提交内容到暂存区-撤回暂存区的内容"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、提交内容到暂存区-撤回暂存区的内容"}},[t._v("#")]),t._v(" 2、提交内容到暂存区 / 撤回暂存区的内容：")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("工作区 → 暂存区")]),t._v(" "),v("p",[t._v("暂存区是临时存储，不会生成版本和历史记录的")]),t._v(" "),v("p",[v("code",[t._v("git add xxx")]),t._v(": 把指定的文件提交到暂存区\n"),v("code",[t._v("git add -u")]),t._v("：把所有修改的文件（修改和删除的，新增的不包含）都提交到暂存区；\n"),v("code",[t._v("git add .")]),t._v("：把所有修改的文件（修改和新增的，删除的不包含）都提交到暂存区；\n"),v("code",[t._v("git add -A")]),t._v("：把所有修改的文件（修改、删除、新增的都包含）都提交到暂存区；")]),t._v(" "),v("ul",[v("li",[t._v("代码为红色：文件还没提交到暂存区")]),t._v(" "),v("li",[t._v("代码为绿色：文件已经提交到暂存区未提交到本地版本库")])])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("从暂存区撤回内容")]),t._v(" "),v("p",[v("code",[t._v("git rm --cached xxx")]),t._v("（文件名需要加后缀）：将提交到暂存区的xxx文件撤回\n"),v("code",[t._v("git rm --cached . -r")]),t._v("：将所有提交到暂存区的文件撤回\n"),v("code",[t._v("git checkout .")]),t._v("：把暂存区的内容撤回到工作区（会覆盖现有工作区中的内容，无法找回）\n"),v("code",[t._v("git reset HEAD .")]),t._v("：把当前暂存区的内容回滚为上一次暂存区的内容")])]),t._v(" "),v("h2",{attrs:{id:"_3、把暂存区中的内容提交到本地版本库-撤回提交到本地版本库的内容-撤回提交的-commit"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、把暂存区中的内容提交到本地版本库-撤回提交到本地版本库的内容-撤回提交的-commit"}},[t._v("#")]),t._v(" 3、把暂存区中的内容提交到本地版本库 / 撤回提交到本地版本库的内容（撤回提交的 "),v("code",[t._v("commit")]),t._v(" ）：")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("暂存区 → 本地版本库")]),t._v(" "),v("p",[t._v("提交到本地版本库会生成相关版本的历史记录，如果以后想要回滚到某一次的代码，可以用"),v("code",[t._v("git")]),t._v("相关命令迁出对应的版本\n"),v("code",[t._v("git log/git reflog")]),t._v(" 用来查看"),v("code",[t._v("commit")]),t._v("的每一个版本\n"),v("code",[t._v("git commit -m 'xxx'")]),t._v("：把暂存区的内容提交到本地版本库，后面的内容都是对本次提交新版本的说明xxx为说明")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("从本地版本库撤回内容")]),t._v(" "),v("p",[t._v("就是撤回之前"),v("code",[t._v("git commit")]),t._v("的操作。对于是否清空工作区代码有两种选择")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("1、不清空工作区的代码，撤回了"),v("code",[t._v("commit")]),t._v("之后，修改的代码依然保留，可以直接"),v("code",[t._v("commit")]),v("br"),t._v(" "),v("code",[t._v("git reset --soft xxxx（最少7位）")]),t._v("：回退到某个版本("),v("code",[t._v("xxx")]),t._v("为版本号)，只回退了"),v("code",[t._v("git commit")]),t._v("的信息，不会恢复工作区的代码(修改的代码不会取消)。如果还要提交，直接"),v("code",[t._v("commit")]),t._v("即可；\n"),v("code",[t._v("git reset --soft HEAD^")]),t._v("：将上一次的"),v("code",[t._v("git commit")]),t._v("的内容撤回，同上，修改的代码不会取消。"),v("code",[t._v("HEAD")]),t._v("指向当前的版本，"),v("code",[t._v("HEAD^")]),t._v("指向上一个提交。")])]),t._v(" "),v("li",[v("p",[t._v("2、清空工作区的代码，修改的代码会被清空"),v("br"),t._v(" "),v("code",[t._v("git reset --hard xxx（最少7位）")]),t._v("：彻底回退到某个版本，工作区的代码修改也会变为某个版本的内容，撤销的"),v("code",[t._v("commit")]),t._v("中所包含的更改被清空；\n"),v("code",[t._v("git reset --hard HEAD^")]),t._v("：彻底回退到上个版本，工作区的代码修改也会变为上一个版本的内容；")])])])]),t._v(" "),v("h2",{attrs:{id:"_4、把本地版本库的代码同步到远程仓库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4、把本地版本库的代码同步到远程仓库"}},[t._v("#")]),t._v(" 4、把本地版本库的代码同步到远程仓库")]),t._v(" "),v("blockquote",[v("p",[v("code",[t._v("git push origin master")])])]),t._v(" "),v("h2",{attrs:{id:"比较每个区域的不同"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#比较每个区域的不同"}},[t._v("#")]),t._v(" 比较每个区域的不同")]),t._v(" "),v("blockquote",[v("p",[t._v("工作区 VS 暂存区："),v("code",[t._v("git diff")])]),t._v(" "),v("p",[t._v("工作区 VS 本地版本库："),v("code",[t._v("git diff master")])]),t._v(" "),v("p",[t._v("暂存区 VS 本地版本库："),v("code",[t._v("git diff --cached")])])]),t._v(" "),v("h2",{attrs:{id:"根提交-root-commit"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#根提交-root-commit"}},[t._v("#")]),t._v(" 根提交("),v("code",[t._v("root-commit")]),t._v(")")]),t._v(" "),v("blockquote",[v("p",[t._v("第一次提交到本地版本库：如果我们创建一个新的仓库，但是没有做过根提交，此时我们仓库中没有任何的分支，哪怕是"),v("code",[t._v("master")]),t._v("；也就不存在分支切换")])]),t._v(" "),v("h2",{attrs:{id:"团队协作与分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#团队协作与分支"}},[t._v("#")]),t._v(" 团队协作与分支")]),t._v(" "),v("h3",{attrs:{id:"中央服务器-中央仓库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#中央服务器-中央仓库"}},[t._v("#")]),t._v(" 中央服务器（中央仓库）")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[t._v("公司内部都会有一个内部的中央"),v("code",[t._v("git")]),t._v("仓库管理服务器，我们也可以使用免费的"),v("code",[t._v("git")]),t._v("仓库（"),v("code",[t._v("github")]),t._v("）来作为我们的中央服务器仓库：")]),t._v(" "),v("p",[t._v("如何把本地代码推送到远程仓库上：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("1.先与"),v("code",[t._v("gitHub")]),t._v("仓库保持链接")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git remote add name（name可以自己修改） 地址")])]),t._v(" "),v("li",[v("code",[t._v("git remote rm name")]),t._v(" 移除这个链接通道")]),t._v(" "),v("li",[v("code",[t._v("git remote -v")]),t._v("：查看当前仓库链接的所有通道")])])]),t._v(" "),v("li",[v("p",[t._v("2.把本地仓库的代码和版本信息推送到远程仓库上")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git push origin master")]),t._v(" 把本机代码推送到"),v("code",[t._v("github")]),t._v("远程仓库上")]),t._v(" "),v("li",[v("code",[t._v("git pull origin master")]),t._v(" 把远程仓库中的代码同步到本地")])])])]),t._v(" "),v("p",[t._v("一个项目中，我们一般会有以下 这样的文件")]),t._v(" "),v("p",[v("strong",[v("code",[t._v(".git")])]),t._v(":在当前项目中创建"),v("code",[t._v("git")]),t._v("仓库生成的文件（很重要）\n"),v("strong",[v("code",[t._v(".idea")])]),t._v("：使用"),v("code",[t._v("webStrom")]),t._v("开发，默认生成的文件，记录"),v("code",[t._v("ws")]),t._v("的一些信息（没用）\n"),v("strong",[v("code",[t._v(".gitignore")])]),t._v("：我们一般手动在当前项目中创建一个后缀名是"),v("code",[t._v("gitignore")]),t._v("的文件，这个文件中记录了每一次"),v("code",[t._v("git")]),t._v("提交的时候忽略不管的文件或者文件夹（可在ws中创建这个文件）\n"),v("strong",[v("code",[t._v("Readme.md")])]),t._v("：这个文件选择性增加，通过这个文件可以对当前的项目进行详细的描述（使用markdown编写）")]),t._v(" "),v("p",[t._v("在真正项目中们一般都是需要团队协作开发的，也就是会存在一个中央远程仓库，如何把"),v("code",[t._v("gitHub")]),t._v("上的远程仓库上的文件复制到本地，执行命令如下")]),t._v(" "),v("p",[v("code",[t._v("git clone 远程仓库地址")])]),t._v(" "),v("p",[t._v("克隆到本地之后就可以继续开发了，开发完成后需要把开发的内容同步到远程仓库上，还是按照之前的老步骤操作即可")]),t._v(" "),v("p",[v("code",[t._v("git add .")]),v("br"),t._v(" "),v("code",[t._v("git commit -m '备注'")]),v("br"),t._v(" "),v("code",[t._v("git push origin master")]),v("br")]),t._v(" "),v("p",[t._v("获取最新代码的时候只需要输入以下代码\n"),v("code",[t._v("git pull origin master")])])]),t._v(" "),v("h3",{attrs:{id:"代码合并"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代码合并"}},[t._v("#")]),t._v(" 代码合并")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[t._v("作为开发者每次提交代码之前都要先"),v("code",[t._v("pull")]),t._v("一下")]),t._v(" "),v("ul",[v("li",[v("p",[v("em",[t._v("[如果远程仓库和本地仓库不是同一个文件同一行代码冲突]")]),t._v("\ngit会自动帮我们合并仓库中的代码与我们工作区的代码")])]),t._v(" "),v("li",[v("p",[v("em",[t._v("[如果同一个文件的同一行代码冲突]")])]),t._v(" "),v("ul",[v("li",[t._v("找到冲突的文件，留下自己想要的代码")]),t._v(" "),v("li",[t._v("不管之前是否"),v("code",[t._v("commit")]),t._v("过，都要重新的"),v("code",[t._v("commit")]),t._v("，然后"),v("code",[t._v("push")]),t._v("即可")])])])])]),t._v(" "),v("h3",{attrs:{id:"单独分支的管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单独分支的管理"}},[t._v("#")]),t._v(" 单独分支的管理")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[t._v("1、每个功能创建一个"),v("code",[t._v("dev-xxx")]),t._v("分支，并且切换到这个分支上")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[t._v("git branch "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查看现有分支")]),t._v("\ngit branch dev  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个名叫dev的新分支（创建分支的时候会把master上的commit信息同步到新创建的分支上）")]),t._v("\ngit checkout dev  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 切换到名叫dev的分支上")]),t._v("\ngit checkout "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b dev "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个新的dev分支并切换到dev这个分支上")]),t._v("\ngit branch "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),v("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v(" dev "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除dev这个分支（一定要在其他分支上才能删除dev分支）")]),t._v("\ngit merge xxx "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 合并当前分支与xxx分支的内容")]),t._v("\n")])])]),v("p",[t._v("2、正常写代码，把每天开发的任务都先提交到自己功能的分支上")]),t._v(" "),v("p",[t._v("3、提交到远程仓库上")]),t._v(" "),v("ul",[v("li",[t._v("把本地自己分支"),v("code",[t._v("dev-xxx")]),t._v("中的内容，合并到本地自己的"),v("code",[t._v("dev")]),t._v("分支下")]),t._v(" "),v("li",[t._v("把本地自己的分支删除（防止分支重复）")])]),t._v(" "),v("p",[t._v("4、把本地最新合并的"),v("code",[t._v("dev")]),t._v("分支代码，提交到远程仓库的"),v("code",[t._v("dev")]),t._v("分支下")]),t._v(" "),v("p",[t._v("[具体操作]\n1、创建一个仓库\n2、把仓库克隆到本地\n3、把源代码传递到master上\n4、在本地仓库中创建gh-pages分支\n5、把介绍页面放在gh-pages分支下\n6、把介绍页面的内容上传到gitHub的gh-pages分支下")])]),t._v(" "),v("h2",{attrs:{id:"linux操作系统中常用的命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#linux操作系统中常用的命令"}},[t._v("#")]),t._v(" Linux操作系统中常用的命令")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("常用Linux命令")]),t._v(" "),v("p",[v("code",[t._v("ls")]),t._v("：查看当前目录下的文件")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("ls -l")]),t._v(" 查看详细信息")]),t._v(" "),v("li",[v("code",[t._v("ls -a")]),t._v(" 查看隐藏文件")]),t._v(" "),v("li",[v("code",[t._v("ls -la")]),t._v("  同时具备以上两点")])]),t._v(" "),v("p",[v("code",[t._v("cd")]),t._v("：目录切换")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("cd ../")]),t._v("  返回上级目录")]),t._v(" "),v("li",[v("code",[t._v("cd /")]),t._v("  返回根目录")]),t._v(" "),v("li",[v("code",[t._v("cd xxx")]),t._v("  进入到指定文件夹")]),t._v(" "),v("li",[v("code",[t._v("cd E：")]),t._v("  进入到指定的磁盘")])]),t._v(" "),v("p",[v("code",[t._v("mkdir")]),t._v(" 文件夹名字 （创建一个文件夹）\n"),v("code",[t._v("touch xxx.xxx")]),t._v(" 创建一个空文件  如：touche.txt")]),t._v(" "),v("ul",[v("li",[t._v("好处：可以创建无文件名的文件")]),t._v(" "),v("li",[t._v("在电脑隐藏文件后缀名的情况下，我们也不至于创建出"),v("code",[t._v("1.txt.txt")]),t._v("这样后缀名重复的文件")])]),t._v(" "),v("p",[v("code",[t._v("vi")]),t._v(" 向指定文件中插入内容  如："),v("code",[t._v("vi 1.txt")])]),t._v(" "),v("ul",[v("li",[t._v("首先我们进入命令窗口")]),t._v(" "),v("li",[t._v("我么先按i，进入到插入内容模式")]),t._v(" "),v("li",[t._v("编辑需要写入的内容")]),t._v(" "),v("li",[t._v("按ESC键，然后在"),v("em",[t._v("英文状态下再按")]),v("code",[t._v("shift")]),v("em",[t._v("+")]),v("code",[t._v(";")]),v("em",[t._v("键，再输入")]),v("code",[t._v("wq")]),t._v("，按回车（保存并退出）")]),t._v(" "),v("li",[t._v("或者 输入"),v("code",[t._v("q！")]),t._v("，按回车（强制退出，新输入的内容不保存）")])]),t._v(" "),v("p",[v("code",[t._v("echo xxx>1.txt")]),t._v(" 把xxx内容放到"),v("code",[t._v("1.txt")]),t._v("文件中，如果没有这个文件则创建这个文件，新存放的内容会替换原有的内容")]),t._v(" "),v("p",[v("code",[t._v("echo xxx>>1.txt")]),t._v(" 新的内容会追加到原有内容的后面\n"),v("code",[t._v("cat")]),t._v(" 查看文件中的内容\n"),v("code",[t._v("cp xxx")]),t._v("  拷贝文件\n"),v("code",[t._v("rm xxxx")]),t._v("   删除文件")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("rm -r")]),t._v(" 递归删除（把当前文件夹中所有的后代元素也都遍历删除）")]),t._v(" "),v("li",[v("code",[t._v("rm -rf")]),t._v(" 强制删除 一旦删除，无法返回")])])]),t._v(" "),v("h2",{attrs:{id:"stash-临时缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#stash-临时缓存"}},[t._v("#")]),t._v(" "),v("code",[t._v("stash")]),t._v(" 临时缓存")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("临时存储")]),t._v(" "),v("p",[v("code",[t._v("git stash")]),t._v("：命令可用于临时保存和恢复修改，可跨分支。\n"),v("code",[t._v('git stash save "xxx"')]),t._v(": 执行存储时，添加备注，方便查找，只有"),v("code",[t._v("git stash")]),t._v("也要可以的，但查找时不方便识别。\n"),v("code",[t._v("git stash list")]),t._v(": 查看"),v("code",[t._v("stash")]),t._v("存储列表\n"),v("code",[t._v("git stash apply")]),t._v(": 应用某个存储,但不会把存储从存储列表中删除,默认使用第一个存储,即"),v("code",[t._v("stash@{0}")]),t._v("，如果要使用其他个，"),v("code",[t._v("git stash apply stash@{$num}")]),t._v(",比如第二个："),v("code",[t._v("git stash apply stash@{1}")])]),t._v(" "),v("p",[v("code",[t._v("git stash drop stash@{$num}")]),t._v("：丢弃"),v("code",[t._v("stash@{$num}")]),t._v("存储，从列表中删除这个存储\n"),v("code",[t._v("git stash clear")]),t._v("：删除所有缓存的"),v("code",[t._v("stash")])])]),t._v(" "),v("h2",{attrs:{id:"修改完代码-未commit-发现分支错误"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#修改完代码-未commit-发现分支错误"}},[t._v("#")]),t._v(" 修改完代码（未commit）发现分支错误")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("解决方法")]),t._v(" "),v("ul",[v("li",[t._v("1、保存修改 在当前分支执行："),v("code",[t._v("git stash save 'xxxxx'")]),t._v("。")]),t._v(" "),v("li",[t._v("2、切换分支 执行："),v("code",[t._v("git checkout xxxx")]),t._v("。xxx为分支名称")]),t._v(" "),v("li",[t._v("3、同步修改 执行："),v("code",[t._v("git stash apply")]),t._v("。默认使用第一个存储,即"),v("code",[t._v("stash@{0}")])])])]),t._v(" "),v("h2",{attrs:{id:"代码合并中的问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代码合并中的问题"}},[t._v("#")]),t._v(" 代码合并中的问题")]),t._v(" "),v("h3",{attrs:{id:"只合并某个分支的某一个commit到另一个分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#只合并某个分支的某一个commit到另一个分支"}},[t._v("#")]),t._v(" 只合并某个分支的某一个commit到另一个分支")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("单个commit合并")]),t._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout develop-hbb\n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick 7c32be61\n")])])]),v("p",[v("code",[t._v("7c32be61")]),t._v("是"),v("code",[t._v("develop")]),t._v("上的一个"),v("code",[t._v("fix bug")]),t._v("的"),v("code",[t._v("commit")]),t._v("，上面就是将这一个"),v("code",[t._v("commit")]),t._v("合并到"),v("code",[t._v("develop-hbb")]),t._v("上")])]),t._v(" "),v("h3",{attrs:{id:"合并连续多个的commit到指定的分支上"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#合并连续多个的commit到指定的分支上"}},[t._v("#")]),t._v(" 合并连续多个的commit到指定的分支上")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("多个commit合并")]),t._v(" "),v("ul",[v("li",[t._v("1、首先基于"),v("code",[t._v("develop")]),t._v("创建一个临时分支"),v("code",[t._v("temp")]),t._v(", 并指明新分支的最后一个"),v("code",[t._v("commit")])])]),t._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-b")]),t._v(" temp 54dfef55 \n")])])]),v("ul",[v("li",[t._v("2、将temp分支上的从"),v("code",[t._v("7c32be61")]),t._v("到最后一个"),v("code",[t._v("commit")]),t._v("，也就是"),v("code",[t._v("54dfef55")]),t._v("的commit合并到"),v("code",[t._v("develop-hbb")]),t._v("上")])]),t._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--onto")]),t._v(" develop-hbb 7c32be61^\n")])])])]),t._v(" "),v("h2",{attrs:{id:"回滚代码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#回滚代码"}},[t._v("#")]),t._v(" 回滚代码")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("revert")]),t._v(" "),v("p",[v("code",[t._v("revert")]),t._v("的原理实际上就是提交一个反向变更，低消之前的变更。"),v("code",[t._v("revert")]),t._v("会保留所有的操作记录，历史变更和"),v("code",[t._v("revert")]),t._v("变更都会保存在历史中，可以从"),v("code",[t._v("git log")]),t._v("中看到。")]),t._v(" "),v("p",[t._v("对于"),v("code",[t._v("merge")]),t._v("的"),v("code",[t._v("commit")]),t._v("的回滚，需要注意的是回滚到哪个分支上,不指定的话会报以下错误")]),t._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert cd397d20\nerror: commit cd397d2076b88da38d22df868f039e847524d457 is a merge but no "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" option was given.\nfatal: revert failed\n")])])]),v("p",[t._v("回滚失败 "),v("code",[t._v("no -m option was given")]),t._v("，这是因为"),v("code",[t._v("merge")]),t._v("是把两个分支合并到一起，回滚的话，就必须告诉"),v("code",[t._v("git")]),t._v("需要回滚到哪个分支，输入"),v("code",[t._v("git log")]),t._v("查看"),v("code",[t._v("git")]),t._v("日志")]),t._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[t._v("commit f54750f4b818e7a1a935ae6ce414e7e5a72dbc06\nAuthor: xxx "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("xxx@xxx.com"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Mon Nov "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(":59:23 "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v(" +0800\n\n    feat: 设置到期时间逻辑处理\n\ncommit cd397d2076b88da38d22df868f039e847524d457\nMerge: f0d7232a 87b077c1\nAuthor: xxx "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("xxx@xxx.com"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Mon Nov "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(":13:11 "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v(" +0800\n\n    feat: 合并品牌升级代码\n\ncommit f0d7232a25c6b5ab0ed07b0445ac8fde5c4ce65c\nAuthor: xxx "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("xxx@xxx.com"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Sat Nov "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(":05:29 "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v(" +0800\n\n    feat: 前端页面开发\n")])])]),v("p",[t._v("从log"),v("code",[t._v("(Merge: f0d7232a 87b077c1）")]),t._v("中可以看出来，"),v("code",[t._v("f0d7232a")]),t._v("是1，"),v("code",[t._v("87b077c1")]),t._v("是合并来的代码2\n所以回滚"),v("code",[t._v("-m")]),t._v("参数值是1，命令是"),v("code",[t._v("git revert cd397d20 -m 1")])])]),t._v(" "),v("h2",{attrs:{id:"取消merge"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#取消merge"}},[t._v("#")]),t._v(" 取消merge")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[t._v("如果"),v("code",[t._v("merge")]),t._v("过程中（一般是有冲突需要解决），想取消，则执行命令")]),t._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--abort")]),t._v("\n")])])])]),t._v(" "),v("h2",{attrs:{id:"git常用命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令"}},[t._v("#")]),t._v(" git常用命令")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" config get registry  // 查看npm当前镜像源\n\n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" config "),v("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" registry https://registry.npmjs.org\n\n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" config get registry  // 查看yarn当前镜像源\n\n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" config "),v("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" registry https://registry.yarnpkg.com \n\n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" —verbose 可以查看安装包的时候真实请求的源\n\n")])])])])])}),[],!1,null,null,null);v.default=s.exports}}]);