(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{395:function(t,s,a){"use strict";a.r(s);var r=a(25),e=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#字符串的查询"}},[t._v("字符串的查询")]),s("ul",[s("li",[s("a",{attrs:{href:"#charat-charcodeat"}},[t._v("charAt && charCodeAt")])]),s("li",[s("a",{attrs:{href:"#indexof-lastindexof-字符串中的兼容所有浏览器"}},[t._v("indexOf && lastindexOf(字符串中的兼容所有浏览器)")])])])]),s("li",[s("a",{attrs:{href:"#字符串的截取"}},[t._v("字符串的截取")]),s("ul",[s("li",[s("a",{attrs:{href:"#slice-substr-substring"}},[t._v("slice && substr && substring")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-slice-start-end"}},[t._v("1.slice(start，end)")])]),s("li",[s("a",{attrs:{href:"#_2-substr-start-length-sʌbstər"}},[t._v("2.substr(start，length)['sʌbstər]")])]),s("li",[s("a",{attrs:{href:"#_3-substring-start-end"}},[t._v("3.substring(start，end)")])])])])])]),s("li",[s("a",{attrs:{href:"#字符串转换为数组"}},[t._v("字符串转换为数组")]),s("ul",[s("li",[s("a",{attrs:{href:"#split"}},[t._v("`split`")])])])]),s("li",[s("a",{attrs:{href:"#字符串的修改"}},[t._v("字符串的修改")]),s("ul",[s("li",[s("a",{attrs:{href:"#replace"}},[t._v("replace")])])])]),s("li",[s("a",{attrs:{href:"#字符串的大小写转换"}},[t._v("字符串的大小写转换")]),s("ul",[s("li",[s("a",{attrs:{href:"#touppercase-tolowercase"}},[t._v("toUpperCase && toLowerCase")])])])]),s("li",[s("a",{attrs:{href:"#字符串中去除空格"}},[t._v("字符串中去除空格")]),s("ul",[s("li",[s("a",{attrs:{href:"#trim-trimleft-trimright"}},[t._v("trim && trimLeft &&trimRight")])])])])])]),s("p"),t._v(" "),s("h1",{attrs:{id:"_6、字符串方法-12个"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、字符串方法-12个"}},[t._v("#")]),t._v(" 6、字符串方法（12个）")]),t._v(" "),s("blockquote",[s("p",[t._v("字符串的所有方法都不会改变原来的字符串")])]),t._v(" "),s("blockquote",[s("p",[t._v("在JS中用单/双引号包裹起来的都是字符串")]),t._v(" "),s("p",[t._v("字符串就是由0-多个字符组成的字串")]),t._v(" "),s("ul",[s("li",[t._v("1.以数字为索引，从零开始\n-2.有length属性，存储的是当前字符串中字符的个数（字符串的长度）")])])]),t._v(" "),s("h2",{attrs:{id:"字符串的查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串的查询"}},[t._v("#")]),t._v(" "),s("code",[t._v("字符串的查询")])]),t._v(" "),s("h3",{attrs:{id:"charat-charcodeat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#charat-charcodeat"}},[t._v("#")]),t._v(" "),s("code",[t._v("charAt && charCodeAt")])]),t._v(" "),s("blockquote",[s("p",[t._v("str.charAt(索引)：返回指定位置的字符\n"),s("em",[t._v("字符串可以用[]访问单个字符，为什么还要用charAt()?区别如下：")])]),t._v(" "),s("ul",[s("li",[t._v("str[index]，IE7及以下不兼容，index超不超出字符串的长度都会返回undefined；")]),t._v(" "),s("li",[t._v("str.charAt(index)：对于超出index 范围的值，会返回空字符串，IE6-8兼容")])]),t._v(" "),s("p",[t._v("str.charCodeAt(索引)：返回指定位置字符的Unicode编码值（对应ASCII码表）\nString.fromCharCode(十进制的Unicode值)：把Unicode值转换为对应的字符")])]),t._v(" "),s("h3",{attrs:{id:"indexof-lastindexof-字符串中的兼容所有浏览器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#indexof-lastindexof-字符串中的兼容所有浏览器"}},[t._v("#")]),t._v(" "),s("code",[t._v("indexOf && lastindexOf")]),t._v("(字符串中的兼容所有浏览器)")]),t._v(" "),s("blockquote",[s("p",[t._v("str.indexOf（'A'）：获取A字符在str中第一次出现位置的索引\nstr.lastindexOf（'A'）:获取A字符在str中最后一次出现位置的索引\n如果当前字符没有在str中出现过，则返回-1，我们可以根据这个规律验证一下字符串中是否包含某个字符")])]),t._v(" "),s("h2",{attrs:{id:"字符串的截取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串的截取"}},[t._v("#")]),t._v(" "),s("code",[t._v("字符串的截取")])]),t._v(" "),s("h3",{attrs:{id:"slice-substr-substring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slice-substr-substring"}},[t._v("#")]),t._v(" "),s("code",[t._v("slice && substr && substring")])]),t._v(" "),s("h4",{attrs:{id:"_1-slice-start-end"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-slice-start-end"}},[t._v("#")]),t._v(" 1.slice(start，end)")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("start：要抽取的字串的起始下标（从0开始，可不写，如果不写start，则end也不能写，结果返回整个字符串）,支持负数，-1表示字符串的最后一个字符）")]),t._v(" "),s("li",[t._v("end：子字符串的结束位置，包含start，而不包含end。（可不写，不写的话则返回start到原字符串结尾，如果为负数，-2则表示到子字符串的倒数第二个字符结束）")])]),t._v(" "),s("p",[s("strong",[t._v("说明")])]),t._v(" "),s("ul",[s("li",[t._v("1："),s("em",[t._v("start >= end")]),t._v("，则返回空字符串")]),t._v(" "),s("li",[t._v("2："),s("em",[t._v("start或end超出范围")]),t._v("，只截取未超出范围的字符，没有返回空字符串")])])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zhumulamafeng'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// g;")]),t._v("\n")])])]),s("h4",{attrs:{id:"_2-substr-start-length-sʌbstər"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-substr-start-length-sʌbstər"}},[t._v("#")]),t._v(" 2.substr(start，length)['sʌbstər]")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("start：要抽取的字串的起始下标（可不写，如果不写start，则end也不能写，结果返回整个字符串）,支持负数，-1表示字符串的最后一个字符）")]),t._v(" "),s("li",[t._v("length：子串的字符数，必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。如果为0或负数，则返回空字符串")])]),t._v(" "),s("p",[s("em",[t._v("提示和注释")])]),t._v(" "),s("p",[s("em",[t._v("注释")]),t._v("：substr() 的参数指定的是子串的开始位置和长度，因此它可以替代 substring() 和 slice() 来使用。")]),t._v(" "),s("p",[s("em",[t._v("重要事项")]),t._v("：ECMAscript 没有对该方法进行标准化，因此反对使用它。")])]),t._v(" "),s("h4",{attrs:{id:"_3-substring-start-end"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-substring-start-end"}},[t._v("#")]),t._v(" 3.substring(start，end)")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("start：要抽取的字串的起始下标（从0开始，可不写，如果不写start，则end也不能写，结果返回整个字符串）")]),t._v(" "),s("li",[t._v("end：子字符串的结束位置，包含start，而不包含end。（可不写，不写的话则返回start到原字符串结尾）")])]),t._v(" "),s("p",[s("strong",[t._v("说明")])]),t._v(" "),s("ul",[s("li",[t._v("1："),s("em",[t._v("start = end")]),t._v("，则返回空字符串")]),t._v(" "),s("li",[t._v("2："),s("em",[t._v("start >end")]),t._v("，那么该方法在提取子串之前会先交换这两个参数。")]),t._v(" "),s("li",[t._v("3："),s("em",[t._v("start或end超出范围")]),t._v("，只截取未超出范围的字符，没有返回空字符串")])]),t._v(" "),s("p",[s("em",[t._v("重要事项：")]),t._v(" 与 slice() 和 substr() 方法不同的是，substring() 不接受负的参数，会将负数转换为0，然后和start调换位置")])]),t._v(" "),s("h2",{attrs:{id:"字符串转换为数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串转换为数组"}},[t._v("#")]),t._v(" "),s("code",[t._v("字符串转换为数组")])]),t._v(" "),s("h3",{attrs:{id:"split"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#split"}},[t._v("#")]),t._v(" "),s("strong",[s("code",[t._v("split")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按照某一个字符把字符串分割成数组，参数为字符或者正则")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将字符串分割为单个字符的数组")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("spit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将字符串分割为单词组成的数组")]),t._v("\n")])])]),s("h2",{attrs:{id:"字符串的修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串的修改"}},[t._v("#")]),t._v(" "),s("code",[t._v("字符串的修改")])]),t._v(" "),s("h3",{attrs:{id:"replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[t._v("#")]),t._v(" "),s("code",[t._v("replace")])]),t._v(" "),s("blockquote",[s("p",[t._v("str.replace（n,m）：把字符n替换成为字符m。")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("注意")])]),t._v("：replace并不会修改原来的字符串，而是返回一个新的字符串")]),t._v(" "),s("ul",[s("li",[t._v("1.在不使用正则的情况下，每次执行只能替换第一个匹配的字符串")]),t._v(" "),s("li",[t._v("2.第一项为正则时，正则捕获几次，就替换几次，换成函数也同理，正则捕获几次，函数就执行几次，函数中返回的是什么，就相当于把正则捕获的内容替换成什么。")]),t._v(" "),s("li",[t._v("3.如果换成函数，函数中会默认传入三个参数，arguments（当前函数的参数集合）")])])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ceshi")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*  arguments(捕获到的内容，索引，原始字符串集合)\n    默认传入的参数：\n      如果传入的正则中有小括号，\n        arguments[1] =  第一个小括号捕获的内容\n        arguments[2] =  第二个小括号捕获的内容…直到小括号捕获的内容显示完，然后才继续显示索引    \t\t\t\t\t\t\t\n        arguments[n] =  每一次捕获的开始索引\n        arguments[n+1] =  原始字符串\n      传入的正则中没有小括号\n        arguments[0] = content:每一次捕获的大正则内容\n        arguments[1] = index：每一次捕获的开始索引\n        arguments[2] = input：原始字符串 \n  */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"字符串的大小写转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串的大小写转换"}},[t._v("#")]),t._v(" "),s("code",[t._v("字符串的大小写转换")])]),t._v(" "),s("h3",{attrs:{id:"touppercase-tolowercase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#touppercase-tolowercase"}},[t._v("#")]),t._v(" "),s("code",[t._v("toUpperCase && toLowerCase")])]),t._v(" "),s("blockquote",[s("p",[t._v("str.toUpperCase：把字母转换为大写")]),t._v(" "),s("p",[t._v("str.toLowerCase：把字母转换为小写")])]),t._v(" "),s("h2",{attrs:{id:"字符串中去除空格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串中去除空格"}},[t._v("#")]),t._v(" "),s("code",[t._v("字符串中去除空格")])]),t._v(" "),s("h3",{attrs:{id:"trim-trimleft-trimright"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trim-trimleft-trimright"}},[t._v("#")]),t._v(" "),s("code",[t._v("trim && trimLeft &&trimRight")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 去除字符串两端的空白字符")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("trimLeft")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 去除字符串左边的空白字符")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("trimRight")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 去除字符串右边的空白字符")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);