(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{366:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#正则的创建方式"}},[t._v("正则的创建方式")])]),s("li",[s("a",{attrs:{href:"#正则两种创建方式的区别"}},[t._v("正则两种创建方式的区别")])]),s("li",[s("a",{attrs:{href:"#正则的元字符和修饰符"}},[t._v("正则的元字符和修饰符")]),s("ul",[s("li",[s("a",{attrs:{href:"#修饰符"}},[t._v("修饰符")])]),s("li",[s("a",{attrs:{href:"#元字符"}},[t._v("元字符")])])])]),s("li",[s("a",{attrs:{href:"#正则中-的特殊含义"}},[t._v("正则中[]的特殊含义")])]),s("li",[s("a",{attrs:{href:"#正则中-的作用"}},[t._v("正则中（）的作用")])]),s("li",[s("a",{attrs:{href:"#常用的正则表达式编写"}},[t._v("常用的正则表达式编写")]),s("ul",[s("li",[s("a",{attrs:{href:"#web-url解析"}},[t._v("web URL解析")])])])]),s("li",[s("a",{attrs:{href:"#正则的捕获"}},[t._v("正则的捕获")]),s("ul",[s("li",[s("a",{attrs:{href:"#exec"}},[t._v("exec")])]),s("li",[s("a",{attrs:{href:"#match"}},[t._v("match")])]),s("li",[s("a",{attrs:{href:"#所有的支持正则的方法都可以实现正则的捕获-一般都是字符串的方法"}},[t._v("所有的支持正则的方法都可以实现正则的捕获（一般都是字符串的方法）")])])])]),s("li",[s("a",{attrs:{href:"#replace-第二个参数支持直接在字符串中使用-1-9"}},[t._v("replace(第二个参数支持直接在字符串中使用$1-9)")]),s("ul",[s("li",[s("a",{attrs:{href:"#时间格式化字符串"}},[t._v("时间格式化字符串")])])])])])]),s("p"),t._v(" "),s("h1",{attrs:{id:"_14、正则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14、正则"}},[t._v("#")]),t._v(" 14、正则")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("正则就是一个规则，用来处理字符串的规则\n1、正则匹配\n编写一个规则，验证某个字符串是否符合这个规则，正则匹配使用的是"),s("code",[t._v("test")]),t._v("方法\n2、正则捕获\n编写一个规则，在一个字符串中把符合规则的内容都获取到；正则的"),s("code",[t._v("exec")]),t._v("、字符串的"),s("code",[t._v("split、replace、match")]),t._v("等方法都支持正则")])]),t._v(" "),s("h2",{attrs:{id:"正则的创建方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则的创建方式"}},[t._v("#")]),t._v(" 正则的创建方式")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("1.字面量方式："),s("code",[t._v("var reg=/\\d/")]),t._v(";\n2.实例创建方式 "),s("code",[t._v("var reg=new RegExp('a','b')")]),t._v(";支持两个参数，第一个为元字符，第二个是修饰符")])]),t._v(" "),s("h2",{attrs:{id:"正则两种创建方式的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则两种创建方式的区别"}},[t._v("#")]),t._v(" 正则两种创建方式的区别")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("区别")]),t._v(" "),s("p",[t._v("1，字面量方式中出现一切字符都会按找元字符来解析，所以"),s("em",[t._v("不能进行变量值的拼接")]),t._v("，而实例创建的方式是可以的。\n2，字面量方式中直接写"),s("code",[t._v("\\d")]),t._v("就可以，而在实例创建方式中需要把它转义;只需要在"),s("code",[t._v("\\d")]),t._v("之前再加一个\\即可。即"),s("code",[t._v("\\\\d")])])]),t._v(" "),s("h2",{attrs:{id:"正则的元字符和修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则的元字符和修饰符"}},[t._v("#")]),t._v(" 正则的元字符和修饰符")]),t._v(" "),s("blockquote",[s("p",[t._v("任何一个正则都是由"),s("code",[t._v("元字符")]),t._v("和"),s("code",[t._v("修饰符")]),t._v("组成的")])]),t._v(" "),s("h3",{attrs:{id:"修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),s("blockquote",[s("p",[t._v("ignoreCase(i):忽略大小写;")]),t._v(" "),s("p",[t._v("global(g):全局匹配;找到所有的匹配而不是只找到第一个匹配")]),t._v(" "),s("p",[t._v("multiline(m):多行匹配;")])]),t._v(" "),s("h3",{attrs:{id:"元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),s("blockquote",[s("p",[t._v("代表出现次数的量词元字符")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t  出现零到多次\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t  出现"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("次或"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("次\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t  出现"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("到多次\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t  出现n次\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t  出现n到多次\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t  出现n到m次\n")])])]),s("blockquote",[s("p",[t._v("具有特殊意义的元字符")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("    \\       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("转义字符")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("两个\\\\就表示两个\\\\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("以某一个元字符开始，不占位置。")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("只对字符串的开头起作用"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("$")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("以某一个元字符结尾，不占位置。")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("只对字符串的末尾起作用"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   除了\\"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("换行符"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("以外的任意字符")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   分组\n    x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("y     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   x或y中的一个\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("xyz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   x或者y或者z中的一个\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("xyz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   除了x y z的任何一个字符\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("z之间的任何一个字符\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   除了a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("z的任何一个字符\n    \\d      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   一个"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("之间的数字\n    \\"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   匹配一个非数字字符\n    \\b      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   一个边界符"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("“er\\b”可以匹配“never”中的“er”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("但不能匹配“verb”中的“er”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("单词左右两边是边界，"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("的左右两边也是边界，所以会把zhu"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("mu"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("la"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ma"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("feng当作"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("个单词，而我们想把它当成一个单词\n    \\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   匹配一个换行符。\n    \\s      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   匹配一个空白字符 （空格，制表符，换页符）\n    \\w      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   数字，字母，下划线中的任意一个字符\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   只匹配不捕获\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   先行断言      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   当且仅当"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),t._v("后面跟着"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'y'")]),t._v("时，匹配"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),t._v("。\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   正向否定查找   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   当且仅当"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),t._v("后面不是"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'y'")]),t._v("时，匹配"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("后行断言")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("x   当且仅当"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),t._v("前面跟着"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'y'")]),t._v("时，匹配"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("反向否定查找")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("x   当且仅当"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),t._v("前面不是"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'y'")]),t._v("时，匹配"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),t._v("\n")])])]),s("h2",{attrs:{id:"正则中-的特殊含义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则中-的特殊含义"}},[t._v("#")]),t._v(" 正则中"),s("code",[t._v("[]")]),t._v("的特殊含义")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("中括号")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("1、"),s("code",[t._v("[]")]),t._v(" 里面出现的元字符一般都是代表本身意义的,比如"),s("code",[t._v("[xyz]")]),t._v("(表示"),s("code",[t._v("x")]),t._v("或"),s("code",[t._v("y")]),t._v("或"),s("code",[t._v("z")]),t._v("其中的一个),但是有一些依然表示符号本身的意思如"),s("code",[t._v("[\\d\\w]")]),t._v("(表示数字或字母其中的一个)")])]),t._v(" "),s("li",[s("p",[t._v("2、中括号中的横线("),s("code",[t._v("-")]),t._v(")代表两种意思")]),t._v(" "),s("ul",[s("li",[t._v("出现在中间："),s("code",[t._v("[a-z0-9]")]),t._v("："),s("code",[t._v("-")]),t._v("代表范围连接符")]),t._v(" "),s("li",[t._v("出现在末尾："),s("code",[t._v("[a-z_0-9-]")]),t._v("：如果"),s("code",[t._v("-")]),t._v("的左右两边任何一边没有内容那么"),s("code",[t._v("-")]),t._v("代表本身的意思，即匹配一个横线。")])])]),t._v(" "),s("li",[s("p",[t._v("3、"),s("code",[t._v("[]")]),t._v("中出现的两位数不代表本身意思，而是以一位数来解析，如[18]代表 1或8 两个数字中的一个；")])])]),t._v(" "),s("p",[s("strong",[t._v("中括号中需要转义的字符")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("1、反斜杠("),s("em",[s("code",[t._v("\\")])]),t._v(")必须转义")]),t._v(" "),s("li",[t._v("2、方括号("),s("em",[s("code",[t._v("[")])]),t._v(","),s("em",[s("code",[t._v("]")])]),t._v(")必须转义")]),t._v(" "),s("li",[t._v("3、"),s("code",[t._v("^")]),t._v(" 在 首位 必须转义,"),s("em",[s("code",[t._v("-")])]),t._v(" 在 中间 必须转义")])])]),t._v(" "),s("h2",{attrs:{id:"正则中-的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则中-的作用"}},[t._v("#")]),t._v(" 正则中（）的作用")]),t._v(" "),s("p",[s("code",[t._v("提高优先级")])]),t._v(" "),s("blockquote",[s("p",[t._v("正则中的分组，也可以理解为一个大正则中的一个正则（包起来的部分是个一个整体）；我们可以使用小括号改变一些默认的优先级。如"),s("code",[t._v("(x|y)")])])]),t._v(" "),s("p",[s("code",[t._v("分组引用")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("(\\d)\\1")]),t._v("："),s("code",[t._v("\\1")]),t._v("代表引用和前面相同的数字；")])]),t._v(" "),s("p",[s("code",[t._v("分组捕获")])]),t._v(" "),s("blockquote",[s("p",[t._v("正则捕获的时候不仅可以把大正则匹配的内容捕获到，而且也会把小括号中的内容捕获到")])]),t._v(" "),s("h2",{attrs:{id:"常用的正则表达式编写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用的正则表达式编写"}},[t._v("#")]),t._v(" 常用的正则表达式编写")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("注意：正则中如果同时加入了"),s("code",[t._v("^")]),t._v("和 "),s("code",[t._v("$")]),t._v("表示只能是xxx，不加的话表示包含xxx，而且"),s("code",[t._v("^")]),t._v("只对字符串的开头起作用，"),s("code",[t._v("$")]),t._v("只对字符串的结尾起作用；")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\\d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\\d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\\d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("$"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("  有效数字正则\n\nreg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\\d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("$"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 手机号验证\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//=>/^[\\u4E00-\\u9FA5]$/ 中文汉字的正则")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 姓名的正则：")]),t._v("\nreg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[\\u4E00-\\u9FA5]{2,10}$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[\\u4E00-\\u9FA5]{2,10}(·[\\u4E00-\\u9FA5]{2,10})?$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 邮箱正则")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n  * 以数字字母下划线开头\n  * @前面可以是 数字、字母、下划线、-、. 这些符号\n  * 不能把 -和. 连续出现，出现一次后面必须跟数字字母下划线\n  *  \n  * @后面的部分支持\n  *   企业邮箱\n  *   .com.cn 多域名情况\n  */")]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\w+((-\\w+)|(\\.\\w+))*@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n\n身份证：\n前六位：省市县\n接下来八位 出生年"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("月"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("日\n接下来的两位：没什么用\n倒数第二位数字 奇数为男，偶数为女\nreg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^(\\d{6})(\\d{4})(\\d{2})(\\d{2})\\d{2}(\\d)(\\d|X)$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* web URL 解析正则 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^(https?:\\/\\/)([a-zA-Z0-9\\._-]+\\.[a-zA-Z]{2,6})(:\\d+)?([a-zA-Z0-9\\/_-]+\\/[a-zA-Z0-9_-]*)?(\\?(=?&?[a-zA-Z0-9_-]*)*)?$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),t._v("\n")])])])]),t._v(" "),s("h3",{attrs:{id:"web-url解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web-url解析"}},[t._v("#")]),t._v(" web URL解析")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("使用正则")]),t._v(" "),s("p",[t._v("缺点：不会对URL进行解码")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://carbon.now.sh/my/collection/?bg=rgba(100,180,250,1)&wc=true&wa=true&code=const%20vpc%20%3D%20Vpc.fromLookup(this%2C%20%27MyExistingVPC%27%2C%20%7B%20isDefault%3A%20true%20%7D)%3B%0Anew%20cdk.CfnOutput(this%2C%20%22MyVpc%22%2C%20%7Bvalue%3A%20vpc.vpcId%20%7D)%3B#qq#'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("urlParse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^(?:(https?:)\\/\\/)?([a-zA-Z0-9\\._-]+\\.[a-zA-Z]{2,6})(?::(\\d+))?([a-zA-Z0-9\\/_-]*)?\\/?(([?&][^?#=&]+=[^?#=&]*)*)?(#.*)?$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*  \n    协议($1):(https?:)\n    域名($2):([a-zA-Z0-9\\._-]+\\.[a-zA-Z]{2,6})\n    端口号($3):(:\\d+)\n    路径($4):([a-zA-Z0-9\\/_-]*)\n    参数($5):(([?&][^?#=&]+=[^?#=&]*)*)\n    哈希($7):(#.*)\n    */")]),t._v("\n  reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" $1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $7 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" RegExp\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("protocol")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" $1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https:'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("hostname")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" $2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("port")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" $3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("origin")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("$1"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("//")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("$2"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("$3"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("host")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("$2"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("$3"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("pathname")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" $4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("search")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" $5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("hash")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" $7"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("query")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[?&]([^?=&]+)(?:=([^?=&]*))?")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" group1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" group2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("group1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" group2\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("urlParse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\nconsole.log(res)\n{\n  "protocol": "https:",\n  "hostname": "carbon.now.sh",\n  "port": "",\n  "origin": "https://carbon.now.sh:",\n  "host": "carbon.now.sh:",\n  "pathname": "/my/collection/",\n  "search": "?bg=rgba(100,180,250,1)&wc=true&wa=true&code=const%20vpc%20%3D%20Vpc.fromLookup(this%2C%20%27MyExistingVPC%27%2C%20%7B%20isDefault%3A%20true%20%7D)%3B%0Anew%20cdk.CfnOutput(this%2C%20%22MyVpc%22%2C%20%7Bvalue%3A%20vpc.vpcId%20%7D)%3B",\n  "hash": "#qq#",\n  "query": {\n    "bg": "rgba(100,180,250,1)",\n    "wc": "true",\n    "wa": "true",\n    "code": "const%20vpc%20%3D%20Vpc.fromLookup(this%2C%20%27MyExistingVPC%27%2C%20%7B%20isDefault%3A%20true%20%7D)%3B%0Anew%20cdk.CfnOutput(this%2C%20%22MyVpc%22%2C%20%7Bvalue%3A%20vpc.vpcId%20%7D)%3B"\n  }\n}\n*/')]),t._v("\n")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("使用原生URL对象")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("urlParse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("search"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("query "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("searchParams"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("urlParse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\nconsole.log(res)\n{\n  href: 'https://carbon.now.sh/my/collection/?bg=rgba(100,180,250,1)&wc=true&wa=true&code=const%20vpc%20%3D%20Vpc.fromLookup(this%2C%20%27MyExistingVPC%27%2C%20%7B%20isDefault%3A%20true%20%7D)%3B%0Anew%20cdk.CfnOutput(this%2C%20%22MyVpc%22%2C%20%7Bvalue%3A%20vpc.vpcId%20%7D)%3B#qq#',\n  origin: 'https://carbon.now.sh',\n  protocol: 'https:',\n  username: '',\n  password: '',\n  host: 'carbon.now.sh',\n  hostname: 'carbon.now.sh',\n  port: '',\n  query:{\n    bg: 'rgba(100,180,250,1)',\n    code: 'const vpc = Vpc.fromLookup(this, 'MyExistingVPC', { isDefault: true });\\nnew cdk.CfnOutput(this, \\\"MyVpc\\\", {value: vpc.vpcId });',\n    wa: 'true',\n    wc: 'true'\n  }\n  pathname: '/my/collection/',\n  search: '?bg=rgba(100,180,250,1)&wc=true&wa=true&code=const%20vpc%20%3D%20Vpc.fromLookup(this%2C%20%27MyExistingVPC%27%2C%20%7B%20isDefault%3A%20true%20%7D)%3B%0Anew%20cdk.CfnOutput(this%2C%20%22MyVpc%22%2C%20%7Bvalue%3A%20vpc.vpcId%20%7D)%3B',\n  searchParams: URLSearchParams {},\n  hash: '#qq#'\n}\n*/")]),t._v("\n")])])])]),t._v(" "),s("h2",{attrs:{id:"正则的捕获"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则的捕获"}},[t._v("#")]),t._v(" 正则的捕获")]),t._v(" "),s("h3",{attrs:{id:"exec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exec"}},[t._v("#")]),t._v(" exec")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("正则的捕获：reg.exec(str)")]),t._v(" "),s("p",[t._v("捕获的内容是一个数组，数组中的第一项是当前正则捕获的内容，如果有小括号(),则第二项捕获的是小括号里的内容。")]),t._v(" "),s("ul",[s("li",[t._v("index：捕获内容在字符串中开始的索引位置。")]),t._v(" "),s("li",[t._v("input：捕获的原始字符串。如果没有匹配的返回null；")])]),t._v(" "),s("p",[s("em",[t._v("[懒惰性]")]),t._v("\n捕获的特点：执行一次捕获一次，每次执行"),s("code",[t._v("exec")]),t._v("只捕获第一个匹配的内容。\n为什么会存在懒惰性？")]),t._v(" "),s("ul",[s("li",[t._v("每个正则都自带"),s("code",[t._v("lastIndex")]),t._v("属性：正则每一次捕获在字符串中开始查找的位置，默认值为0；")]),t._v(" "),s("li",[t._v("我们手动修改"),s("code",[t._v("lastIndex")]),t._v("的值也不会影响"),s("code",[t._v("exec")]),t._v("每次开始查找的索引。")])]),t._v(" "),s("p",[t._v("如何解决只捕获第一个匹配（"),s("em",[t._v("懒惰性")]),t._v("）？\n在正则末尾加一个修饰符"),s("code",[t._v("g")])]),t._v(" "),s("p",[s("em",[t._v("原理:")]),t._v("\n修改"),s("code",[t._v("lastIndex")]),t._v("的值为上一次捕获内容之后的第一个字符的索引;加了"),s("code",[t._v("g")]),t._v("之后能保证下次捕获第二个匹配的内容；\n通过加g 每次捕获结束后，"),s("code",[t._v("lastIndex")]),t._v("的值都会改变成最新的值，下次捕获从最新的位置开始找。如果没有找到符合的，则返回"),s("code",[t._v("null")]),t._v("；\n如何解决"),s("code",[t._v("exec")]),t._v("执行一次捕获一次？")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我的方法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myExec")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ary"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ary1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("global"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ary1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ary1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ary"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ary1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 别人的方法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myExec")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ary"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("global"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      ary"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("h3",{attrs:{id:"match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#match"}},[t._v("#")]),t._v(" match")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("用字符串方法实现多次捕获")]),t._v(" "),s("p",[s("code",[t._v("str.match(reg)")]),t._v("\n1、如果正则中加了修饰符g，那么执行一次就可以把所有匹配的结果捕获到\n2、如果不加g，那么只捕获第一次匹配的结果。返回一个数组，数组中是捕获的每一项；\n"),s("em",[t._v("[局限性]")]),t._v("\n在分组捕获中，如果正则不加修饰符"),s("code",[t._v("g")]),t._v("，")]),t._v(" "),s("ul",[s("li",[t._v("那么"),s("code",[t._v("match")]),t._v("和"),s("code",[t._v("exec")]),t._v("一样，可以捕获到小分组的内容。")])]),t._v(" "),s("p",[t._v("如果正则加了修饰符"),s("code",[t._v("g")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("match")]),t._v("只能捕获到大正则匹配的内容，而对于小分组匹配的内容是无法捕获到的；")])]),t._v(" "),s("p",[s("em",[t._v("注意")]),t._v("：由于"),s("code",[t._v("test")]),t._v("和"),s("code",[t._v("exec")]),t._v("的原理相同，如果加了"),s("code",[t._v("g")]),t._v("，都是修改"),s("code",[t._v("lastIndex")]),t._v("值来匹配或者捕获，所以使用"),s("code",[t._v("test")]),t._v("和"),s("code",[t._v("exec")]),t._v("都会修改"),s("code",[t._v("lastIndex")]),t._v("的值，所以使用"),s("code",[t._v("exec")]),t._v("捕获之前最好不要使用"),s("code",[t._v("test")]),t._v("；")]),t._v(" "),s("p",[t._v("用"),s("code",[t._v("test")]),t._v("也可以捕获符合的字符串")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nRegExp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$1"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只能捕获第1个小分组里面的内容")]),t._v("\nRegExp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$2"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只能捕获第2个小分组里面的内容")]),t._v("\nRegExp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$3"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只能捕获第2个小分组里面的内容")]),t._v("\n同reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也能使用RegExp.$1来捕获第1个小分组")]),t._v("\nRegExp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$1"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只能捕获第1个小分组里面的内容")]),t._v("\nRegExp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$2"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只能捕获第2个小分组里面的内容")]),t._v("\n")])])])]),t._v(" "),s("h3",{attrs:{id:"所有的支持正则的方法都可以实现正则的捕获-一般都是字符串的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#所有的支持正则的方法都可以实现正则的捕获-一般都是字符串的方法"}},[t._v("#")]),t._v(" 所有的支持正则的方法都可以实现正则的捕获（一般都是字符串的方法）")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("字符串中常用的支持正则的方法：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("match")])]),t._v(" "),s("li",[s("code",[t._v("replace")])]),t._v(" "),s("li",[s("code",[t._v("split")]),t._v("：如果给的正则中包含小分组，那么会把小分组中的内容也捕获到；")])]),t._v(" "),s("p",[t._v("?:只匹配不捕获， 只能放在小分组的开头。如果加在分组中，那么只会匹配该分组中的内容，而不会捕获\n"),s("code",[t._v("/(?:&｜=)/")])]),t._v(" "),s("p",[t._v("计算是第几个分组的时候，我们从左向右找"),s("code",[t._v("(")]),t._v("即可")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^-?(\\d|([1-9]\\d+))(\\.\\d+)?$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//=>计算是第几个分组的时候，我们从左向右找 ( 即可")]),t._v("\n")])])])]),t._v(" "),s("h2",{attrs:{id:"replace-第二个参数支持直接在字符串中使用-1-9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replace-第二个参数支持直接在字符串中使用-1-9"}},[t._v("#")]),t._v(" replace(第二个参数支持直接在字符串中使用$1-9)")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("替换字符串")]),t._v(" "),s("p",[t._v("在不使用正则的情况下，每次执行只能替换第一个匹配的字符串，而且每次执行都是从字符串索引为0的位置开始查找\n"),s("em",[t._v("第一个参数为正则时")]),t._v("，正则捕获几次，就替换几次，第二个参数是函数时，正则捕获几次，函数就执行几次，函数中返回的是什么，就相当于把正则捕获的内容替换成什么。\n"),s("em",[t._v("第二个参数为函数时")]),t._v("，正则捕获几次，函数就执行几次，函数执行的时候还会默认的传入三个参数：\n"),s("code",[t._v("context")]),t._v("（捕获的内容）\n"),s("code",[t._v("index")]),t._v("（捕获内容在字符串中的开始索引）\n"),s("code",[t._v("input")]),t._v("（原始的字符串）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("珠峰")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// arguments[0]大正则匹配的内容")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果正则中有分组的话")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// arguments[1]第1个小分组匹配的内容")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// arguments[2]第2个小分组匹配的内容")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// …………直到小分组的内容显示完")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// argument[n]每一次捕获的开始索引")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// argument[n+1]原始字符串")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 的是什么就会把正则每次捕获的内容替换成什么")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需求：把每个单词的首字母替换为大写，wo-de-shi-jie 当成一个单词")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my name is wo-de-shi-jie,i am 8 years old,i am the world No1!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[a-zA-Z-]+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("h3",{attrs:{id:"时间格式化字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间格式化字符串"}},[t._v("#")]),t._v(" 时间格式化字符串")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2017-11-07 16:37:00'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//=>'2017年11月07日 16时37分00秒'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//=>使用正则实现")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1、执行一次捕获操作，得到需要的六个结果")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^(\\d{4})-(\\d{1,2})-(\\d{1,2})\\s+(\\d{1,2}):(\\d{1,2}):(\\d{1,2})$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// str = str.replace(reg, function () {")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     var arg = arguments;")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     return arg[1] + '年' + arg[2] + '月' + arg[3] + '日 ' + arg[4] + '时' + arg[5] + '分' + arg[6] + '秒';")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// });")]),t._v("\nstr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$1年$2月$3日 $4时$5分$6秒'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//=>$1等价于第一个分组中获取的内容,类似于上面代码的arg[1]")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//=>'2017年11月07日 16时37分00秒'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myformate")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ary"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{0}年{1}月{2}日 {3}时{4}分{5}秒'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\{(\\d)\\}")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  temp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);