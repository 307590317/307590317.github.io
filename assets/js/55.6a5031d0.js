(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{370:function(t,s,a){"use strict";a.r(s);var n=a(25),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#什么是回调函数"}},[t._v("什么是回调函数")])]),s("li",[s("a",{attrs:{href:"#回调函数中的this问题"}},[t._v("回调函数中的this问题")]),s("ul",[s("li",[s("a",{attrs:{href:"#定时器中的this问题"}},[t._v("定时器中的this问题")])])])])])]),s("p"),t._v(" "),s("h1",{attrs:{id:"_19、js中的回调函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19、js中的回调函数"}},[t._v("#")]),t._v(" 19、Js中的回调函数")]),t._v(" "),s("h2",{attrs:{id:"什么是回调函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是回调函数"}},[t._v("#")]),t._v(" 什么是回调函数")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("回调函数")]),t._v(" "),s("p",[t._v("把一个函数当作实参值传递给另外一个函数，在另外一个函数中执行这个函数，这种处理机制就是回调函数机制；\n什么时候用到回调函数？\n凡是在某一个函数的某一个阶段需要完成某一件事情（而这件事情是不确定的），都可以利用回调函数机制，把需要处理的事情当作值传递进来")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callBack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" callBack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callBack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//也可以使用以下默认方式（不过不严谨：可能传递的不是函数）")]),t._v("\n  callBack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callBack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("1、回调函数可以被执行多次；\n2、还可以给callBack（）传递参数值；\n3、还可以把回调函数中的this进行修改；\n4、我们还可以接收回调函数执行返回的值；")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ary"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("34")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("funciton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的function就是sort方法中的回调函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("h2",{attrs:{id:"回调函数中的this问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回调函数中的this问题"}},[t._v("#")]),t._v(" 回调函数中的this问题")]),t._v(" "),s("blockquote",[s("p",[t._v("回调函数中的 this一般都是window(严格模式下是undefined)，原因：")]),t._v(" "),s("ul",[s("li",[t._v("我们一般执行回调函数的时候都是直接执行回调函数，没有指定执行主体，所以默认情况下都是window；")])])]),t._v(" "),s("h3",{attrs:{id:"定时器中的this问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定时器中的this问题"}},[t._v("#")]),t._v(" 定时器中的this问题")]),t._v(" "),s("blockquote",[s("p",[t._v("只要不指明执行主体，定时器中的this就是window.(严格模式下也是window)；")])])])}),[],!1,null,null,null);s.default=r.exports}}]);